package nl.hu.cisq1.lingo.data;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.util.ArrayList;

import nl.hu.cisq1.lingo.trainer.domain.Mark;
import nl.hu.cisq1.lingo.words.domain.Word;
import org.junit.jupiter.api.Test;

class TurnETest {

    @Test
    void testConstructor() {
        TurnE actualTurnE = new TurnE();
        GameE gameE = new GameE();
        gameE.setRound(new ArrayList<RoundE>());
        gameE.setScore(3);
        RoundE roundE = new RoundE();
        roundE.setWord(new Word());
        roundE.setTurns(new ArrayList<TurnE>());
        roundE.setGame(gameE);
        TurnE turnE = new TurnE();
        turnE.setRound(new RoundE());
        turnE.setFeedback(new FeedbackE());
        turnE.setGuess("Guess");
        turnE.setHint(new HintE());
        turnE.setTurnCount(3);
        FeedbackE feedbackE = new FeedbackE();
        feedbackE.setMarks(new ArrayList<Mark>());
        feedbackE.setAttempt("Attempt");
        feedbackE.setTurnE(turnE);
        TurnE turnE1 = new TurnE();
        turnE1.setRound(new RoundE());
        turnE1.setFeedback(new FeedbackE());
        turnE1.setGuess("Guess");
        turnE1.setHint(new HintE());
        turnE1.setTurnCount(3);
        HintE hintE = new HintE();
        hintE.setHintList(new ArrayList<Character>());
        hintE.setTurnE(turnE1);
        TurnE turnE2 = new TurnE();
        turnE2.setRound(roundE);
        turnE2.setFeedback(feedbackE);
        turnE2.setGuess("Guess");
        turnE2.setHint(hintE);
        turnE2.setTurnCount(3);
        FeedbackE feedbackE1 = new FeedbackE();
        feedbackE1.setMarks(new ArrayList<Mark>());
        feedbackE1.setAttempt("Attempt");
        feedbackE1.setTurnE(turnE2);
        actualTurnE.setFeedback(feedbackE1);
        actualTurnE.setGuess("Guess");
        GameE gameE1 = new GameE();
        gameE1.setRound(new ArrayList<RoundE>());
        gameE1.setScore(3);
        RoundE roundE1 = new RoundE();
        roundE1.setWord(new Word());
        roundE1.setTurns(new ArrayList<TurnE>());
        roundE1.setGame(gameE1);
        TurnE turnE3 = new TurnE();
        turnE3.setRound(new RoundE());
        turnE3.setFeedback(new FeedbackE());
        turnE3.setGuess("Guess");
        turnE3.setHint(new HintE());
        turnE3.setTurnCount(3);
        FeedbackE feedbackE2 = new FeedbackE();
        feedbackE2.setMarks(new ArrayList<Mark>());
        feedbackE2.setAttempt("Attempt");
        feedbackE2.setTurnE(turnE3);
        TurnE turnE4 = new TurnE();
        turnE4.setRound(new RoundE());
        turnE4.setFeedback(new FeedbackE());
        turnE4.setGuess("Guess");
        turnE4.setHint(new HintE());
        turnE4.setTurnCount(3);
        HintE hintE1 = new HintE();
        hintE1.setHintList(new ArrayList<Character>());
        hintE1.setTurnE(turnE4);
        TurnE turnE5 = new TurnE();
        turnE5.setRound(roundE1);
        turnE5.setFeedback(feedbackE2);
        turnE5.setGuess("Guess");
        turnE5.setHint(hintE1);
        turnE5.setTurnCount(3);
        HintE hintE2 = new HintE();
        hintE2.setHintList(new ArrayList<Character>());
        hintE2.setTurnE(turnE5);
        actualTurnE.setHint(hintE2);
        GameE gameE2 = new GameE();
        gameE2.setRound(new ArrayList<RoundE>());
        gameE2.setScore(3);
        RoundE roundE2 = new RoundE();
        roundE2.setWord(new Word());
        roundE2.setTurns(new ArrayList<TurnE>());
        roundE2.setGame(gameE2);
        actualTurnE.setRound(roundE2);
        actualTurnE.setTurnCount(3);
        FeedbackE feedback = actualTurnE.getFeedback();
        assertSame(feedbackE1, feedback);
        HintE hint = actualTurnE.getHint();
        TurnE turnE6 = hint.getTurnE();
        assertSame(feedbackE2, turnE6.getFeedback());
        TurnE turnE7 = feedback.getTurnE();
        assertSame(feedbackE, turnE7.getFeedback());
        assertEquals("Guess", actualTurnE.getGuess());
        assertEquals("Guess", turnE6.getGuess());
        assertEquals("Guess", turnE7.getGuess());
        assertSame(hintE2, hint);
        assertSame(hintE, turnE7.getHint());
        assertSame(hintE1, turnE6.getHint());
        assertSame(roundE2, actualTurnE.getRound());
        assertSame(roundE, turnE7.getRound());
        assertSame(roundE1, turnE6.getRound());
        assertEquals(3, actualTurnE.getTurnCount());
        assertEquals(3, turnE6.getTurnCount());
        assertEquals(3, turnE7.getTurnCount());
    }
}

